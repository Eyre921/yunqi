// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.1.x"]
}


datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 用户模型
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  role      Role     @default(USER)
  password  String?
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 关联
  accounts      Account[]
  sessions      Session[]
  works         Work[]
  uploadConfigs UploadConfig[] @relation("UserUploadConfigs") // 创建的上传配置
  onlineCounterConfigs OnlineCounterConfig[] @relation("UserOnlineCounterConfigs") // 创建的在线人数配置

  @@map("users")
}

// 账户模型（NextAuth）
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

// 会话模型（NextAuth）
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// 验证令牌模型（NextAuth）
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// 作品模型
model Work {
  id          String   @id @default(cuid())
  name        String     // 作品名字
  title       String     // 作品简述
  description String?    // 作品详细描述
  author      String     // 作者名
  prompt      String?    // AI生成提示词
  imageUrl    String     // 图片URL
  imagePath   String?    // OSS文件路径/键名
  ossKey      String?    // OSS文件键名
  ossUrl      String?    // OSS完整访问URL
  fileSize    BigInt?    // 文件大小
  mimeType    String?    // 文件类型
  tags        String[]   @default([]) // 标签数组
  status      WorkStatus @default(PENDING) // 审核状态
  featured    Boolean    @default(false) // 精选标记
  likeCount   Int        @default(0) // 点赞数
  viewCount   Int        @default(0) // 浏览数
  isDeleted   Boolean    @default(false) // 软删除标记
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  approvedAt  DateTime?  // 审核通过时间
  rejectedAt  DateTime?  // 审核拒绝时间
  rejectReason String?   // 拒绝原因

  // 关联
  userId String?
  user   User?  @relation(fields: [userId], references: [id])

  @@map("works")
}

// 上传作品配置模型
model UploadConfig {
  id                String   @id @default(cuid())
  isEnabled         Boolean  @default(false)        // 上传功能开关
  startTime         DateTime?                       // 上传开始时间
  endTime           DateTime?                       // 上传结束时间
  maxUploadsPerUser Int      @default(1)            // 每个用户最大上传数量
  maxFileSize       Int      @default(10485760)     // 最大文件大小（字节，默认10MB）
  allowedFormats    String[] @default(["jpg", "jpeg", "png", "gif"]) // 允许的文件格式
  announcement      String?                         // 公告信息
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // 创建者
  createdBy String?
  creator   User?   @relation("UserUploadConfigs", fields: [createdBy], references: [id])

  @@map("upload_configs")
}

// 在线人数配置模型
model OnlineCounterConfig {
  id            String   @id @default(cuid())
  currentCount  Int      @default(1075)         // 当前显示人数
  baseCount     Int      @default(1000)         // 基础人数
  maxCount      Int      @default(2000)         // 最大人数
  growthRate    Float    @default(0.5)          // 增长速率（每分钟增长人数）
  isEnabled     Boolean  @default(true)         // 功能开关
  displayText   String   @default("人正在云栖大会创作") // 显示文本
  lastUpdated   DateTime @default(now())        // 最后更新时间
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // 创建者
  createdBy String?
  creator   User?   @relation("UserOnlineCounterConfigs", fields: [createdBy], references: [id])

  @@map("online_counter_configs")
}

// 平台配置模型
model PlatformConfig {
  id        String   @id @default(cuid())
  title     String   @default("Qoder和通义灵码 AI Coding 作品秀") // 平台主标题
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("platform_configs")
}

// 枚举类型
enum Role {
  USER
  ADMIN
}

enum WorkStatus {
  PENDING  // 待审核
  APPROVED // 已通过
  REJECTED // 已拒绝
}
